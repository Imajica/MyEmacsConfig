* Terminal 
** <s-f> Run zsh terminal
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "s-f") 'ansi-term)
#+END_SRC
* Minor Settings
** Show lines and columns on the modeline
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (line-number-mode 1)
#+END_SRC
** <C-x k> Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** <C-c d w>  kill whole word>
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c d w") `kill-whole-word)
#+END_SRC
** Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                               (?\{ . ?\})
                               (?\( . ?\))
                               (?\[ . ?\])
                               (?\" . ?\")
                               ))
  (electric-pair-mode t)
#+END_SRC
** No backup files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Maximize at startup
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** C style
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")
#+END_SRC
** Quality of lifeE
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
(setq ring-bell-function 'ignore)
(global-prettify-symbols-mode t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(set-default-font "xos4 Terminus 14" nil t)
#+END_SRC
* ORG Bullets
** ORG Bullets Package
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Easy add emacs-lisp template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC 
* Avy
** <s-x> goto-char
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("s-x" . avy-goto-char))
#+END_SRC
* Config edit/reload
** <C-c r> reload 
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** <C-c e> edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
* Sudo edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind
    ("s-e" . sudo-edit))
#+END_SRC
* Rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (rainbow-delimiters-mode 1))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      ;; (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+END_SRC
* Company
** Main Company package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (add-hook 'after-init-hook 'global-company-mode))
  (with-eval-after-load 'company
   ;; (define-key company-active-map (kbd "M-n") nil )
   ;; (define-key company-active-map (kbd "M-p") nil )
   (define-key company-active-map (kbd "C-n") #'company-select-next)
   (define-key company-active-map (kbd "C-p") #'company-select-previous)
   ;;(define-key company-active-map (kbd "s-c") #'company-abort)
)
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'tex-mode-hook 'company-mode)
    (add-hook 'LaTeX-mode-hook 'company-mode)
    (define-key c-mode-map  [(tab)] 'company-complete)
    (define-key c++-mode-map  [(tab)] 'company-complete)
    ;;(define-key LaTeX-mode-map  [(tab)] 'company-complete)
    )
#+END_SRC
** Company Auctex
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t)
  (company-auctex-init)
#+END_SRC
** Yas minor mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'yas-minor-mode)
(add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
** Company Irony
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :ensure t
  :config
  (require 'company)
  (add-to-list 'company-backends 'company-irony))
#+END_SRC
* Irony
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
* Spaceline
** Main package
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p 1)
    (setq spaceline-column 1)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  (diminish 'hungry-delete-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'flycheck-mode)
  (diminish 'helm-mode)
  (diminish 'anzu-mode)
  (diminish 'undo-tree-mode)
  (diminish 'projectile-mode)
  (diminish 'volatile-highlights-mode)
  (diminish 'yas-mode)
  (diminish 'beacon-mode)
)
#+END_SRC
* Symon
#+BEGIN_SRC emacs-lisp
(use-package symon
  :ensure t
  :bind
  ("s-t" . symon-mode))
#+END_SRC
* Linenum
#+BEGIN_SRC emacs-lisp
(use-package nlinum
   :ensure t
   :config (global-nlinum-mode)
)
#+END_SRC
* Auctex
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets)
    :ensure t)
  (yas-reload-all)
#+END_SRC
* Clock
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
(display-time-mode 1)
#+END_SRC
* Battery indicator
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
